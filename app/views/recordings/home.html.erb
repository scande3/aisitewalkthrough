<script src="https://cdnjs.cloudflare.com/ajax/libs/RecordRTC/5.6.2/RecordRTC.js"></script>
<script src="https://unpkg.com/showdown/dist/showdown.min.js"></script>

<style>
    html, body {
        margin: 0!important;
        padding: 0!important;
    }
    .card {
        margin-right: 10px;
        margin-left: 10px;
    }
</style>

<script src="https://res.cdn.office.net/teams-js/2.2.0/js/MicrosoftTeams.min.js"
        crossorigin="anonymous" >
</script>
<script>
    // Initialize the library
    //await microsoftTeams.app.initialize();
    microsoftTeams.initialize();
</script>


<title>Store Walkthrough App</title>
<meta name="viewport" content="width=device-width, initial-scale=1.0, minimum-scale=1.0">

<center>
  <div class="card">
    <div class="card-header" id="status_area">
      Click to Microphone to start recording...
    </div>
    <div class="card-body">
      <p class="card-text">
        <button id="btn-microphone" type="button" class="btn btn-primary bi bi-mic" style="width:200px; height:200px; font-size: 100px;">
        </button>

        <br /><br />
        <button id="btn-complete" type="button" class="btn btn-secondary" style="width:200px; height:100px; font-size: 20px;" disabled>
          Finish Inspection
        </button>

      </p>
    </div>
  </div>

</center>
<br />

<div class="card">
  <div class="card-header" id="inspection_header">
    Inspection Task
  </div>
  <div class="card-body" id="currentTextArea">
    <p class="card-text">
    <h5>Answer the following for bathroom one (stalls only) and then for bathroom two (urinals and stalls):</h5>
    <ol>
      <li>Are all bathroom stalls cleaned?</li>
      <li>Is toilet paper stocked?</li>
      <li>Are paper towels stocked?</li>
      <li>Is the soap dispenser full?</li>
      <li>Are trashes emptied?</li>
      <li>Is the mirror clean?</li>
      <li>Does any other part of the bathroom require repair or follow-up?</li>
    </ol>
    </p>
  </div>
  <div class="card-footer d-none" id="document_link_area"></div>
</div>
<br />
<script>
    if ( window !== window.parent )
    {
        // The page is in an iframe
        navigator.permissions.query({name:'microphone'}).then(function(result) {
            if (result.state == 'granted') {
                // Access granted
            } else if (result.state == 'prompt') {
                // Access has not been granted
                navigator.mediaDevices.getUserMedia({ audio: true });
            }
        });
    }


    var myWalthroughFileName = 'empty';

    function captureMicrophone(callback) {

        if(microphone) {
            callback(microphone);
            return;
        }

        if(typeof navigator.mediaDevices === 'undefined' || !navigator.mediaDevices.getUserMedia) {
            alert('This browser does not supports WebRTC getUserMedia API.');

            if(!!navigator.getUserMedia) {
                alert('This browser seems supporting deprecated getUserMedia API.');
            }
        }

        navigator.mediaDevices.getUserMedia({
            audio: isEdge ? true : {
                echoCancellation: false
            }
        }).then(function(mic) {
            callback(mic);
        }).catch(function(error) {
            alert('Unable to capture your microphone. Please check console logs.');
            console.error(error);
        });
    }

    // this function is used to generate random file name
    function getFileName(fileExtension) {
        var d = new Date();
        var year = d.getUTCFullYear();
        var month = d.getUTCMonth();
        var date = d.getUTCDate();
        //return 'RecordRTC-' + year + month + date + '-' + getRandomString() + '.' + fileExtension;
        return 'RecordRTC-' + year + month + date + '-' + getRandomString();
    }

    function stopRecordingCallback() {
        var audioBlob = recorder.getBlob();
        myWalthroughFileName = getFileName('wav');
        // we need to upload "File" --- not "Blob"
        var fileObject = new File([audioBlob], myWalthroughFileName, {
            type: 'audio/wav'
        });

        uploadToServer(fileObject, function(response, fileDownloadURL) {
            if(response !== 'ended') {
                // document.getElementById('header').innerHTML = response; // upload progress
                return;
            }

            document.getElementById('status_area').innerHTML = '<a href="' + fileDownloadURL + '" target="_blank">' + fileDownloadURL + '</a>';

            // alert('Successfully uploaded recorded blob.');

            // preview uploaded file
            // document.getElementById('your-video-id').srcObject = null;
            // document.getElementById('your-video-id').src = fileDownloadURL;

            // open uploaded file in a new tab
            // window.open(fileDownloadURL);
        });

        // document.getElementById('audio_data').value = fileObject;
        // console.log(document.getElementById('audio_data').value);
        // document.getElementById('submitform').submit();

        /* if(isSafari) {
            click(btnReleaseMicrophone);
        } */
        return;
    }

    var isEdge = navigator.userAgent.indexOf('Edge') !== -1 && (!!navigator.msSaveOrOpenBlob || !!navigator.msSaveBlob);
    var isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);

    var recorder; // globally accessible
    var microphone;

    var btnMicrophone = document.getElementById('btn-microphone');
    var btnComplete = document.getElementById('btn-complete');
    var currentState = 0;

    btnComplete.onclick = function() {
        if(currentState === 1)
        {
            recorder.pauseRecording();
            btnMicrophone.classList.replace("btn-success", "btn-secondary");
            btnMicrophone.classList.replace("bi-mic-fill", "bi-mic-mute");
            currentState = 2;
        }
        btnComplete.classList.replace("btn-primary", "btn-secondary");
        this.disabled = true;
        btnMicrophone.disabled = true;
        recorder.stopRecording(stopRecordingCallback);
        if(microphone) {
            microphone.stop();
            microphone = null;
        }
        document.getElementById('status_area').innerHTML = "Now processing audio...";
    }

    btnMicrophone.onclick = function() {
        // Start recording
        if (currentState === 0)
        {
            if (!microphone) {
                captureMicrophone(function(mic) {
                    microphone = mic;

                    if(isSafari) {
                        btnStartRecording.disabled = false;
                        btnStartRecording.style.border = '1px solid red';
                        btnStartRecording.style.fontSize = '150%';

                        alert('Please click microphone icon again. First time we tried to access your microphone. Now we will record it.');
                        return;
                    }

                    click(btnMicrophone);
                });
                return;
            }

            this.classList.replace("bi-mic", "bi-mic-fill");
            this.classList.replace("btn-primary", "btn-success");
            btnComplete.classList.replace("btn-secondary", "btn-primary");
            btnComplete.disabled = false;
            document.getElementById('status_area').innerHTML = "Recording audio from microphone...";

            var options = {
                mimeType: 'audio/wav',
                type: 'audio',
                numberOfAudioChannels: isEdge ? 1 : 2,
                checkForInactiveTracks: true,
                bufferSize: 16384,
                recorderType: StereoAudioRecorder // Added based on: https://github.com/muaz-khan/RecordRTC/issues/272
            };

            // Always used for all browsers based on: https://github.com/muaz-khan/RecordRTC/issues/272
            // Otherwise only webm is supported.
            /* if(isSafari || isEdge) {
                options.recorderType = StereoAudioRecorder;
            } */

            if(navigator.platform && navigator.platform.toString().toLowerCase().indexOf('win') === -1) {
                options.sampleRate = 48000; // or 44100 or remove this line for default
            }

            if(isSafari) {
                options.sampleRate = 44100;
                options.bufferSize = 4096;
                options.numberOfAudioChannels = 2;
            }

            if(recorder) {
                recorder.destroy();
                recorder = null;
            }

            recorder = RecordRTC(microphone, options);

            recorder.startRecording();
            currentState = 1;
        }
        else if(currentState === 1)
        {
            recorder.pauseRecording();
            this.classList.replace("btn-success", "btn-secondary");
            this.classList.replace("bi-mic-fill", "bi-mic-mute");
            currentState = 2;
            //btnComplete.disabled = false;
            //btnComplete.classList.replace("btn-secondary", "btn-success");
            document.getElementById('status_area').innerHTML = "Audio Recording Paused...";
        }
        else if(currentState === 2)
        {
            recorder.resumeRecording();
            this.classList.replace("btn-secondary", "btn-success");
            this.classList.replace("bi-mic-mute", "bi-mic-fill");
            currentState = 1;
            //btnComplete.disabled = true;
            //btnComplete.classList.replace("btn-success", "btn-secondary");
            document.getElementById('status_area').innerHTML = "Recording audio from microphone...";
        }
    }

    /* btnReleaseMicrophone.onclick = function() {
        this.disabled = true;
        btnStartRecording.disabled = false;

        if(microphone) {
            microphone.stop();
            microphone = null;
        }

        if(recorder) {
            // click(btnStopRecording);
        }
    }; */

    function click(el) {
        el.disabled = false; // make sure that element is not disabled
        var evt = document.createEvent('Event');
        evt.initEvent('click', true, true);
        el.dispatchEvent(evt);
    }

    function getRandomString() {
        if (window.crypto && window.crypto.getRandomValues && navigator.userAgent.indexOf('Safari') === -1) {
            var a = window.crypto.getRandomValues(new Uint32Array(3)),
                token = '';
            for (var i = 0, l = a.length; i < l; i++) {
                token += a[i].toString(36);
            }
            return token;
        } else {
            return (Math.random() * new Date().getTime()).toString(36).replace(/\./g, '');
        }
    }

    function getFileName(fileExtension) {
        var d = new Date();
        var year = d.getFullYear();
        var month = d.getMonth();
        var date = d.getDate();
        //return 'RecordRTC-' + year + month + date + '-' + getRandomString() + '.' + fileExtension;
        return 'RecordRTC-' + year + month + date + '-' + getRandomString();
    }

    function uploadToServer(blob, callback) {
        // create FormData
        var formData = new FormData();
        formData.append('audio_filename', blob.name);
        formData.append('audio_data', blob);
        callback('Uploading recorded-file to server.');

        var upload_url = '<%=recordings_handle_upload_path%>';

        var upload_directory = upload_url;

        makeXMLHttpRequest(upload_url, formData, function(progress) {
            if (progress !== 'upload-ended') {
                callback(progress);
                return;
            }
            var initialURL = upload_directory + blob.name;
            callback('ended', initialURL);
        });
    }

    function makeXMLHttpRequest(url, data, callback) {
        var request = new XMLHttpRequest();
        request.onreadystatechange = function() {
            if (request.readyState == 4 && request.status == 200) {
                if (request.responseText === 'success') {
                    callback('upload-ended');
                    return;
                }

                /*var converter = new showdown.Converter(),
                  text = request.responseText,
                  html      = converter.makeHtml(text);

                document.getElementById('status_area').innerHTML = "Your Report Is Transcribed Below";
                document.getElementById('currentTextArea').innerHTML = html;*/
                document.getElementById('inspection_header').innerHTML = 'Generated Inspection Report:'
                document.getElementById('document_link_area').innerHTML = 'Report Link: <a href="https://aisitewalkthrough.com/uploads/' + myWalthroughFileName + '.docx" target="_blank">Download Here</a>';
                document.getElementById('document_link_area').classList.remove('d-none');
                document.getElementById('currentTextArea').innerHTML = request.responseText;
                document.getElementById('status_area').innerHTML = 'Processing Complete. Click <a href="#" onclick="location.reload(); return false;">here</a> to do a new report.';

                // alert(request.responseText);
                //alert("success");
                return;
            }
        };
        request.upload.onloadstart = function() {
            console.log('Upload started...');
        };
        request.upload.onprogress = function(event) {
            console.log('Upload Progress ' + Math.round(event.loaded / event.total * 100) + "%");
        };
        request.upload.onload = function() {
            console.log('progress-about-to-end');
        };
        request.upload.onload = function() {
            console.log('Upload ended. Getting file URL.');
        };
        request.upload.onerror = function(error) {
            console.log('Upload failed.');
        };
        request.upload.onabort = function(error) {
            console.log('Upload aborted.');
        };
        request.open('POST', url);
        request.send(data);
    }


</script>